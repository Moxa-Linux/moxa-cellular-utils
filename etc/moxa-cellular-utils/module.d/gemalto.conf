#!/bin/bash
#
#       Copyright (C) MOXA Inc. All rights reserved.
#       Copyright (C) 2017-2018  Aeluin Chen <aeluin.chen@moxa.com>
#
#       This software is distributed under the terms of the
#       MOXA License.  See the file COPYING-MOXA for details.
#

# Gemalto
# Vendor ID: 1e2d

# ELS61
_module_1e2d_005b() {
	local module_path=${1}
	local id=${2}
	local module_name="${3}"
	local dev_id=${module_path//\/*\//}

	ALL_INTERFACE[${id}]=$(ls \
		$module_path/$dev_id:*.10/$SYS_NET/ 2>/dev/null)
	ALL_AT_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.2/tty/ 2>/dev/null | grep tty)
	ALL_MODEM_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.0/tty/ 2>/dev/null | grep tty)
}


_module_1e2d_initialize() {
	while ! cell_at_cmd "ATE0" 1> /dev/null 2>&1 ; do
		sleep 1
	done
	stty -F ${AT_PORT} -echo raw
}

_module_1e2d_005b_initialize() {
	_module_1e2d_initialize
}

_module_1e2d_005b_post_start() {
	cell_at_cmd "ATE0" &> /dev/null
}

_module_1e2d_005b_service() {
	# ^SMONI:

	# UMTS (3G): (19 cols)
	# ^SMONI: ACT,UARFCN,PSC,EC/n0,RSCP,MCC,MNC,LAC,cell,SQual,SRxLev,
	#         PhysCh,SF,Slot,EC/n0,RSCP,ComMod,HSUPA,HSDPA
	#   1) ACT: 3G
	#   2) UARFCN: SEARCH, #UARFCN
	#   4) EC/n0: mapping to EC/Io
	#   6) MCC
	#   7) MNC
	#   8) LAC
	#   9) Cell ID
	#   12) PhysCh: NOCONN, LIMSRV, EDCH, DPCH, FDPCH
	# 1. camping on a cell
	#    ^SMONI: 3G,10564,296,-7.5,-79,262,02,0143,00228FF,-92,-78,NOCONN
	# 2. searching and could not (yet) find a suitable cell:
	#    ^SMONI: 3G,SEARCH,SEARCH
	# 3. camping on a cell but not registered to the network (only
	#    emergency call allowed):
	#    ^SMONI: 3G,10564,96,-7.5,-79,262,02,0143,00228FF,-92,-78,LIMSRV
	# 4. has a dedicated channel:
	#    ^SMONI: 3G,10737,131,-5,-93,260,01,7D3D,C80BC9A,21,11,EDCH,256,4,-5,-93,0,01,06

	# LTE (4G): (15 cols)
	# ^SMONI: ACT,EARFCN,Band,DL bandwidth,UL bandwidth,Mode,MCC,MNC,TAC,
	#         Global Cell ID,Physical Cell ID,Srxlev,RSRP,RSRQ,Conn_state
	#   1) ACT: 4G
	#   2) EARFCN: SEARCH, #EARFCN
	#   3) Band
	#   4) DL bandwidth
	#   5) UL bandwidth
	#   7) MCC
	#   8) MNC
	#   9) TAC
	#   10) Global Cell ID
	#   11) Physical Cell ID
	#   15) Conn_state: SEARCH, LIMSRV, NOCONN, CONN
	# 1. camping on a cell
	#    ^SMONI: 4G,6300,20,10,10,FDD,262,02,BF75,0345103,350,33,-94,-7,NOCONN
	# 2. searching and could not (yet) find a suitable cell:
	#    ^SMONI: 4G,SEARCH
	# 3. camping on a cell but not registered to the network (only
	#    emergency call allowed):
	#    ^SMONI: 4G,6300,20,10,10,FDD,262,02,BF75,0345103,350,33,-94,-7,LIMSRV
	# 4. has a dedicated channel:
	#    ^SMONI: 4G,6300,20,10,10,FDD,262,02,BF75,0345103,350,90,-94,-7,CONN
	local info=""
	local service=""
	local cellid=""
	local lac=""
	local tac=""


	info="$(cell_at_cmd "AT^SMONI" | grep "\^SMONI:" | awk '{print $2}')"
	if [ -z "${info}" ]; then
		return 1
	fi

	service=$(echo "${info}" | cut -d ',' -f 1)
	if [ "${service}" == "3G" ]; then
		service="UMTS"
		lac=$(echo "${info}" | cut -d ',' -f 8)
		cellid=$(echo "${info}" | cut -d ',' -f 9)
	elif [ "${service}" == "4G" ]; then
		service="LTE"
		tac=$(echo "${info}" | cut -d ',' -f 9)
		cellid=$(echo "${info}" | cut -d ',' -f 10)
	else
		echo "${service}"
		return 1
	fi

	echo "Service: ${service}"
	[ ! -z "${lac}" ] && echo "LAC: ${lac}"
	[ ! -z "${tac}" ] && echo "TAC: ${tac}"
	echo "CellID: ${cellid}"
}

_module_1e2d_005b_location_info() {
	_module_1e2d_005b_service | grep -v "Service:"
}

_module_1e2d_005b_iccid() {
	local iccid=$(cell_at_cmd 'AT+CCID?' | grep "+CCID:" | \
		awk '{print $2}' )
	echo ICC-ID: $iccid
}

_module_1e2d_005b_imsi() {
	local imsi=$(cell_at_cmd 'AT+CIMI' | grep -v -e '^$\|OK')
	echo IMSI: $imsi
}

_module_1e2d_005b_module_ids() {
	local imei=$(cell_at_cmd 'AT+CGSN' | grep -v -e '^$\|OK')
	echo IMEI: $imei
}

_module_1e2d_005b_attach_status() {
	local info=""
	local status="0"
	local cs="n/a"
	local ps="detached"


	# ^SIND: psinfo,0,17
	info=$(cell_at_cmd "AT^SIND?") || return $?
	status=$(echo "${info}" | grep "^\^SIND: psinfo," | cut -d',' -f 3)
	if [ "${status}" == "2" ] || \
		[ "${status}" == "4" ] || \
		[ "${status}" == "17" ]; then
		ps="attached"
	fi
	echo "CS: ${cs}"
	echo "PS: ${ps}"
}

_module_1e2d_005b_unlock_pin() {
	local ret=""

	ret=$(cell_at_cmd "AT+CPIN=\"$1\"" 1)
	if [ $? -ne 0 ]; then
		echo $ret
		_exit 1
	fi
}

_module_1e2d_005b_pin_retries() {
	# ^SPIC: 3
	pin_times=$(cell_at_cmd "AT^SPIC" | grep "\^SPIC:" | cut -d ' ' -f 2)
	if [ x"${pin_times}" == x"" ]; then
		echo -1
	else
		echo ${pin_times}
	fi

}

__module_1e2d_005b_start_network() {
	local auth_arg=""
	local auth_idx=0

	# initialize the authorization arg.
	if [ x"$Auth" != x"" ]; then
		if [ x"$Auth" == x"NONE" ]; then
			auth_idx=0
		elif [ x"$Auth" == x"PAP" ]; then
			auth_idx=1
		elif [ x"$Auth" == x"CHAP" ]; then
			auth_idx=2
		else
			return 1
		fi
		auth_arg="1,$auth_idx"
	fi
	if [ x"$Username" != x"" ]; then
		auth_arg="$auth_arg,$Username"
	fi
	if [ x"$Password" != x"" ]; then
		auth_arg="$auth_arg,$Password"
	fi

	if [ ! -z "$auth_arg" ]; then
		cell_at_cmd "AT^SGAUTH=${auth_arg}" 1 | grep -v -q "OK" && \
			return 1
	fi

	cell_at_cmd "AT^SWWAN=1,1" 30 "${MODEM_PORT}" | \
		grep -q "OK" && return 0
	return 1
}

_module_1e2d_005b_start_network() {
	local card_status=""
	local ignore_dns_gw=0
	local pin_status


	_start_network_init $@

	ret=$(_exec_op_rtn set_flight_mode 1 && \
		_exec_op_rtn set_flight_mode 0)
	[ $? -ne 0 ] && echo "${ret}" && _exit 1

	echo "Status: connecting" > "${STATUS_FILE}"

	# query IP from DHCP Server
	ip link set ${QMI_NODE} up
	cell_dhclient ${QMI_NODE} $ignore_dns_gw

	__module_1e2d_005b_start_network
	if [ $? -ne 0 ]; then
		_module_1e2d_005b_stop_network
		_exit 1
	fi

	_exit 0
}

_module_1e2d_005b_stop_network() {
	_clear_state

	# release IP by dhclient -r
	[ x"${QMI_NODE}" != x"" ] && cell_dhclient_kill "${QMI_NODE}"
	cell_at_cmd "AT^SWWAN=0,1" 3 "${MODEM_PORT}" | \
		grep -q "OK" && return 0
}

_module_1e2d_005b_ppp_start_network() {
	at_start_network $@
}

_module_1e2d_005b_ppp_stop_network() {
	at_stop_network $@
}

_module_1e2d_005b_wvdial_template_file() {
        echo "${CONF_DIR}/wvdial/gemalto-els61.conf.template"
}
