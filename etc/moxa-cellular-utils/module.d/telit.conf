#!/bin/bash
#
#       Copyright (C) MOXA Inc. All rights reserved.
#       Copyright (C) 2016-2017  Aeluin Chen <aeluin.chen@moxa.com>
#
#       This software is distributed under the terms of the
#       MOXA License.  See the file COPYING-MOXA for details.
#

# Telit
# Vendor ID: 1bc7

# LE910
_module_1bc7_1201() {
	local module_path=${1}
	local id=${2}
	local module_name="${3}"
	local dev_id=${module_path//\/*\//}

	ALL_MODULE_NAME[${id}]="Telit $(cat ${module_path}/product)"
	if ! $module_path/$dev_id:*.7/ 2>/dev/null; then
		ALL_MODULE_ID[${id}]=${ALL_MODULE_ID[${id}]}_c1
	fi
	ALL_QMI_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.2/$SYS_USB/ 2>/dev/null)
	ALL_QMI_PROTOCOL[${id}]="raw-ip"
	ALL_INTERFACE[${id}]=$(ls \
		$module_path/$dev_id:*.2/$SYS_NET/ 2>/dev/null)
	ALL_GPS_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.3/ 2>/dev/null | grep tty)
	ALL_AT_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.4/ 2>/dev/null | grep tty)
	ALL_MODEM_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.5/ 2>/dev/null | grep tty)
	CARRIER="ATT|Verizon"
}

# LE910-EU V2
_module_1bc7_0036() {
	local module_path=${1}
	local id=${2}
	local module_name="${3}"
	local dev_id=${module_path//\/*\//}

	ALL_MODULE_NAME[${id}]="Telit LE910-EU V2"
	ALL_INTERFACE[${id}]=$(ls \
		$module_path/$dev_id:*.12/$SYS_NET/ 2>/dev/null)
	ALL_AT_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.0/tty/ 2>/dev/null)
	ALL_MODEM_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.6/tty/ 2>/dev/null)
}

#_module_1bc7_initialize() {
#}

#_module_1bc7_xxxx_initialize() {
#	_module_1bc7_initialize
#}

_module_telit_gps_on() {
	value=$(cell_at_cmd 'AT$GPSP?' | grep '^$GPSP' | awk '{print $2}')
	cell_at_cmd 'AT$GPSRST' 1 &> /dev/null && \
		cell_at_cmd 'AT$GPSNMUN=2,1,1,1,1,1,1' 1 &> /dev/null
	[ $? -ne 0 ] && return 1

	if [ "${value}" != "1" ]; then
		cell_at_cmd 'AT$GPSP=1' 2 &> /dev/null
	fi
	[ $? -eq 0 ] && cell_at_cmd 'AT$GPSSAV' 1 &> /dev/null
}
_module_1bc7_1201_gps_on() {
	_module_telit_gps_on
}
_module_1bc7_1201_c1_gps_on() {
	_module_telit_gps_on
}

_module_telit_gps_off() {
	value=$(cell_at_cmd 'AT$GPSP?' | grep '^$GPSP' | awk '{print $2}')
	cell_at_cmd 'AT$GPSRST' 1 &> /dev/null && \
		cell_at_cmd 'AT$GPSNMUN=0,1,0,0,0,0,0' 1 &> /dev/null
	[ $? -ne 0 ] && return 1

	if [ "${value}" != "0" ]; then
		cell_at_cmd 'AT$GPSP=0' 2 &> /dev/null
	fi
	[ $? -eq 0 ] && cell_at_cmd 'AT$GPSSAV' 1 &> /dev/null
}
_module_1bc7_1201_gps_off() {
	_module_telit_gps_off
}
_module_1bc7_1201_c1_gps_off() {
	_module_telit_gps_off
}

_module_1bc7_1201_c1_post_start() {
	cell_at_cmd "ATE0" &> /dev/null
}

_module_telit_pin_retries() {
	# #PCT: 3
	pin_times=$(cell_at_cmd "AT#PCT" | grep "^#PCT:" | cut -d ' ' -f 2)
	if [ x"${pin_times}" == x"" ]; then
		echo -1
	else
		echo ${pin_times}
	fi
}
_module_1bc7_1201_c1_pin_retries() {
	_module_telit_pin_retries
}
_module_1bc7_0036_pin_retries() {
	_module_telit_pin_retries
}

_module_telit_imsi() {
	local imsi=$(cell_at_cmd 'AT+CIMI' | grep -v -e '^$\|OK')
	echo "IMSI: $imsi"
}
_module_1bc7_1201_c1_imsi() {
	_module_telit_imsi
}
_module_1bc7_0036_imsi() {
	_module_telit_imsi
}

_module_1bc7_0036_attach_status() {
	local info=""
	local status="0"
	local cs="n/a"
	local ps="detached"

	# +CGATT: 1
	info=$(cell_at_cmd "AT+CGATT?")
	status=$(echo "${info}" | grep "^+CGATT:" | awk '{print $2}')
	if [ "${status}" == "1" ]
	then
		ps="attached"
	fi
	echo "CS: ${cs}"
	echo "PS: ${ps}"
}

_module_telit_service() {
	# +CGREG: <n>,<stat>[,<lac_tac>,<ci>,<Act>,<rac_mme_code>]
	# <lac_tac>,<ci>,<Act> and <rac_mme_code> are reported only if
	#   <n>=2 and the mobile is registered on some network cell.

	# <stat> - registration status
	#   0 - not registered, terminal is not currently searching a new
	#       operator to register to
	#   1 - registered, home network
	#   2 - not registered, but terminal is currently searching a new
	#       operator to register to
	#   3 - registration denied
	#   4 - unknown
	#   5 - registered, roaming
	# <lac_tac> - location area code (2G, 3G) or tracking area code (4G)
	#             in hexadecimal format (e.g. "00C3" equals 195 in decimal)
	# <ci> - cell ID in hexadecimal format.
	# <AcT>: integer type; access technology of the serving cell
	#   0 - GSM
	#   2 - UTRAN
	#   3 - GSM w/EGPRS
	#   4 - UTRAN w/HSDPA
	#   5 - UTRAN w/HSUPA
	#   6 - UTRAN w/HSDPA and HSUPA
	#   7 - E-UTRAN
	# <rac_mme_code> - string type; one byte routing area code (2G, 3G) or
	#                  Mobile Management Entity code (4G) in hexadecimal
	#                  format.
	# +CGREG: 2,1,"2BC0","3418017",7,01
	local info=""
	local _service=""
	local service=""
	local cellid=""
	local lac=""
	local tac=""


	info="$(cell_at_cmd "AT+CGREG?" | grep "^+CGREG:" | awk '{print $2}')"
	if [ -z "${info}" ]; then
		return 1
	fi

	if [ "$(echo "${info}" | cut -d ',' -f 1)" != "2" ]; then
		cell_at_cmd "AT+CGREG=2" 0.5> /dev/null 2>&1
		[ $? -ne 0 ] && return 1
	fi

	cellid=$(echo "${info}" | cut -d ',' -f 4 | sed -e 's/"//g')
	lac_tac=$(echo "${info}" | cut -d ',' -f 3 | sed -e 's/"//g')
	_service=$(echo "${info}" | cut -d ',' -f 5)
	if [ "${_service}" == "0" ] || [ "${_service}" == "3" ]; then
		service="GSM"
	elif [ "${_service}" == "2" ]; then
		service="UMTS"
	elif [ "${_service}" == "4" ]; then
		service="HSDPA"
	elif [ "${_service}" == "5" ]; then
		service="HSUPA"
	elif [ "${_service}" == "6" ]; then
		service="HSPA"
	elif [ "${_service}" == "7" ]; then
		service="LTE"
	else
		echo "Unknown service: ${_service}"
		return 1
	fi

	echo "Service: ${service}"
	[ "${service}" == "LTE" ] && printf "TAC: " || printf "LAC: "
	printf "${lac_tac}\n"
	echo "CellID: ${cellid}"
}
_module_1bc7_1201_c1_service() {
	_module_telit_service
}
_module_1bc7_0036_service() {
	_module_telit_service
}
_module_1bc7_1201_c1_location_info() {
	_module_telit_service | grep -v "Service:"
}
_module_1bc7_0036_location_info() {
	_module_telit_service | grep -v "Service:"
}

_module_1bc7_1201_c1_iccid() {
	local iccid=$(cell_at_cmd 'AT+ICCID' | grep "^+ICCID:" | \
		awk '{print $2}' )
	echo ICC-ID: $iccid
}

_module_1bc7_0036_iccid() {
	local iccid=$(cell_at_cmd 'AT+CCID' | grep "^+CCID:" | \
		awk '{print $2}' )
	echo ICC-ID: $iccid
}

_module_1bc7_1201_c1_module_ids() {
	local imei=$(cell_at_cmd 'AT#CGSN=1' | grep "^#CGSN:" | \
		awk '{print $2}' )
	echo IMEI: $imei
}

_module_1bc7_0036_module_ids() {
	local imei=$(cell_at_cmd 'AT+IMEISV' | grep -v -e '^$\|OK')
	echo IMEI: $imei
}

_module_1bc7_1201_c1_wvdial_template_file() {
	echo ${CONF_DIR}/wvdial/telit-le910c1.conf.template
}

_module_1bc7_1201_c1_cell_set_profile() {
	local id="$1"
	local apn="$2"
	local type="${3:-IPV4V6}"


	if [ $# -lt 1 ]; then
		_cell_usage_cmd _cell_usage_set_profile
		_exit 4
	fi

	[ -z "${apn}" ] && apn="\"\""
		_exec_op_rtn set_profile "${id}" "${apn}" "${type}" && \
		_exec_op_rtn set_flight_mode 1 && \
		_exec_op_rtn set_flight_mode 0 &&
		_exit 0
	_exit 1
}

setup_interface() {
	local info=${1}
	local ifname=${ALL_INTERFACE[0]}
	local tmp
	local ip_addr
	local netmask
	local gateway

	tmp="$(echo "${info}" | awk -F',' '{print $4}')"
	tmp="${tmp:1:${#tmp}-2}"
	ip_addr="$(echo ${tmp} | awk -F'.' '{print $1"."$2"."$3"."$4}')"
	netmask="$(echo ${tmp} | awk -F'.' '{print $5"."$6"."$7"."$8}')"
	gateway="$(echo "${info}" | awk -F',' '{print $5}')"
	gateway="${gateway:1:${#gateway}-2}"

	ifconfig ${ifname} ${ip_addr} netmask ${netmask} up
	route add default gw ${gateway}
	arp -i ${ifname} -s ${gateway} 11:22:33:44:55:66

	{
		echo "Status: connected"
		echo "IFName: ${ifname}"
		echo "IP: ${ip_addr}"
		echo "SubnetMask: ${netmask}"
		echo "Gateway: ${gateway}"
	} > "${STATUS_FILE}"
}

_module_1bc7_0036_start_network() {
	local info

	_start_network_init $@
	echo "Status: connecting" > "${STATUS_FILE}"

	cell_at_cmd "AT#NCM=1,1" >/dev/null
	cell_at_cmd "AT+CGACT=1,1" >/dev/null
	sleep 1

	cell_at_cmd "AT+CGDATA=\"M-RAW_IP\",1" >/dev/null

	info="$(cell_at_cmd "AT+CGCONTRDP=1" | grep "^+CGCONTRDP" | head -n 1)"
	setup_interface "${info}"
}

_module_1bc7_0036_stop_network() {
	local ifname=${ALL_INTERFACE[0]}

	_clear_state

	cell_at_cmd "AT+CGATT=0" >/dev/null
	sleep 1
	cell_at_cmd "AT+CGATT=1" >/dev/null
	ifconfig ${ifname} down
}

_module_1bc7_1201_c1_switch_carrier() {
	cell_at_cmd "ATE0" > /dev/null 2>&1
	local carrier="${1}"
	local carrier_number=""
	local current_carrier=$(_module_1bc7_1201_c1_check_carrier | grep "carrier name" | cut -d '=' -f 2)
	local info=""

	if ! cell_at_cmd 'AT#FWSWITCH=?' | grep -q "OK"; then
		echo "Switch carrier function is not supported, firmware needs to be upgraded"
		_exit 3
	fi

	case "${carrier}" in
	ATT)
		carrier_number="0"
		;;
	Verizon)
		carrier_number="1"
		;;
	TMO)
		carrier_number="2"
		;;
	*)
		_cell_usage_switch_carrier
		_exit 3
		;;
	esac

	if [ "${current_carrier}" == "${carrier}" ]; then
		echo "The carrier has been set to ${current_carrier}"
		_exit
	fi

	cell_at_cmd "AT#FWSWITCH=${carrier_number}"

	echo "Wait for module reset..."
	sleep 10
	_cell_wait_module_back
}

_module_1bc7_1201_c1_check_carrier() {
	cell_at_cmd "ATE0" > /dev/null 2>&1
	local carrier_number="$(cell_at_cmd "AT#FWSWITCH?" | grep FWSWITCH | awk '{print $2}' | cut -d ',' -f 1)"
	local carriers="ATT Verizon"
	local carrier=""

	if ! cell_at_cmd 'AT#FWSWITCH=?' | grep -q "OK"; then
		echo "Carrier function is not supported, firmware needs to be upgraded"
		_exit 3
	fi

	case "${carrier_number}" in
	0)
		carrier="ATT"
		;;
	1)
		carrier="Verizon"
		;;
	2)
		carrier="TMO"
		;;
	*)
		echo "Unknow Carrier..."
		_exit 3
		;;
	esac

	echo "----------Carrier Info----------"
	echo "carrier name=${carrier}"
	echo "available carriers=${carriers}"
	echo -e "--------------------------------"
}
