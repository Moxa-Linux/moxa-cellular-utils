#!/bin/bash
#
#       Copyright (C) MOXA Inc. All rights reserved.
#       Copyright (C) 2016-2017  Aeluin Chen <aeluin.chen@moxa.com>
#
#       This software is distributed under the terms of the
#       MOXA License.  See the file COPYING-MOXA for details.
#

# Sierra Wireless
# Product ID: 1199

# MC7304/7354
_module_1199_68c0() {
	local module_path=${1}
	local id=${2}
	local module_name="${3}"
	local dev_id=${module_path//\/*\//}

	ALL_INTERFACE[${id}]=$(ls \
		$module_path/$dev_id:*.8/$SYS_NET/ 2>/dev/null)
	ALL_QMI_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.8/$SYS_USB/ 2>/dev/null)
	ALL_GPS_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.2/ 2>/dev/null | grep tty)
	ALL_AT_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.3/ 2>/dev/null | grep tty)
	CARRIER="Verizon|ATT|Sprint|Generic"
}

# MC7455
_module_1199_9071() {
	local module_path=${1}
	local id=${2}
	local module_name="${3}"
	local dev_id=${module_path//\/*\//}

	ALL_MODULE_NAME[${id}]=$(echo "${module_name}" | grep -o 'MC[^ ]*')
	ALL_QMI_PROTOCOL[${id}]="raw-ip"
	ALL_INTERFACE[${id}]=$(ls \
		$module_path/$dev_id:*.10/$SYS_NET/ 2>/dev/null)
	ALL_QMI_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.10/$SYS_USB/ 2>/dev/null)
	ALL_GPS_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.2/ 2>/dev/null | grep tty)
	ALL_AT_PORT[${id}]=$(ls \
		$module_path/$dev_id:*.3/ 2>/dev/null | grep tty)
	CARRIER="Verizon|ATT|Sprint|Generic|Auto"
}

_module_1199_initialize() {
	while ! cell_at_cmd "ATE0" 1> /dev/null 2>&1 ; do
		sleep 1
	done
	stty -F ${AT_PORT} -echo raw
}

_module_1199_68c0_initialize() {
	_module_1199_initialize
}

_module_1199_9071_initialize() {
	_module_1199_initialize
}

_module_1199_gps_on() {
	echo -n "\$GPS_START" > ${GPS_PORT}
}

_module_1199_gps_off() {
	echo -n "\$GPS_STOP" > ${GPS_PORT}
}

_module_1199_set_flight_mode() {
	local flight=${1:-1}
	local mode=""

	# flight mode (persistent-low-power)
	# online mode (online)
	if [ ${flight} -eq 1 ]; then
		mode="persistent-low-power"
	else
		mode="online"
	fi
	if _qmicli --dms-set-operating-mode="${mode}" &> /dev/null; then
		return 0
	fi
	return 1
}

_module_1199_68c0_set_flight_mode() {
	_module_1199_set_flight_mode $@
}

_module_1199_9071_set_flight_mode() {
	_module_1199_set_flight_mode $@
}

_module_1199_68c0_gps_on() {
	_module_1199_gps_on
}

_module_1199_9071_gps_on() {
	_module_1199_gps_on
}

_module_1199_68c0_gps_off() {
	_module_1199_gps_off
}

_module_1199_9071_gps_off() {
	_module_1199_gps_off
}

# check module
_module_1199_is_at_exist() {
	if [ x"${AT_PORT}" == x"NotSupport" ]; then
		echo "Please insert the cellular module and reboot."
		return "1"
	else
		return "0"
	fi
}

# set module to default
_module_1199_set_to_default() {
	local choise


	echo "WARNING:It will RESET module to factory default"	
	read -p "Do you want to continune?(y/n):" choice


	# check module status 
	_module_1199_is_at_exist 2>/dev/null
	[ x"$?" != x"0" ] && _exit

	if [ $choice = "y" ]; then
		# entercnd : Enable access to password-protected commands
		echo -e -n "AT!NVBACKUP=0" > ${AT_PORT} &> /dev/null
		# set to default
		echo -e -n "AT!NVBACKUP=0" > ${AT_PORT} &> /dev/null
		echo -e -n "AT!NVDEF" > ${AT_PORT} &> /dev/null
		echo -e -n "AT!NVRESTORE=0" > ${AT_PORT} &> /dev/null
		echo -e -n "AT!NVRESTORE=1" > ${AT_PORT} &> /dev/null
		echo -e -n "AT!NVRESTORE=2" > ${AT_PORT} &> /dev/null

		if [ -e "$PROFILE_FILE" ]; then
			_exec_op restart
		else
			echo "Warning : File \"$PROFILE_FILE\" does not exist."
			_exec_op stop_network
			sleep 5
			echo "You neet to set the config file by 'cell_mgmt start'."
		fi
	fi
}

# chekc current carrier
_module_1199_68c0_check_carrier() {
	# chekc module status 
	_module_1199_is_at_exist 2>/dev/null
	[ x"$?" != x"0" ] && _exit

	if [ x"$MODULE_NAME" != x"MC7354" ]; then
		>&2 echo "Error: Operation not support."
		_exit 3
	fi

	local module_info=""
	local time="4"


	cell_at_cmd 'ATE0' > /dev/null
	cell_at_cmd 'AT!entercnd="A710"' > /dev/null
	module_info=$(cell_at_cmd 'AT!GOBIIMPREF?')

	#preffered
	local pre_fw=$(echo "$module_info" |grep "pre" | grep "fw" | \
		awk -F: '{print $2}') && pre_fw=${pre_fw// /}
	local pre_carrier_name=$(echo "$module_info"|grep "pre" | \
		grep "carrier" | awk -F: '{print $2}') && \
		pre_carrier_name=${pre_carrier_name// /}	
	local pre_config=$(echo "$module_info"|grep "pre" | grep "config" | \
		awk -F: '{print $2}' ) && \
		pre_config=${pre_config// /}

	#current
	local fw=$(echo "$module_info" |grep "current" | grep "fw" | \
		awk -F: '{print $2}') && fw=${fw// /}
	local carrier_name=$(echo "$module_info"|grep "current" | \
		grep "carrier" | awk -F: '{print $2}') && \
		carrier_name=${carrier_name// /}	
	local config=$(echo "$module_info"|grep "current" | grep "config" | \
		awk -F: '{print $2}' ) && \
		config=${config// /}

	echo "----------Carrier Info----------"
	echo "preffered firmware=$pre_fw"
	echo "preffered carrier name=$pre_carrier_name"
	echo "preffered carrier config=$pre_config"

	echo "firmware=$fw"
	echo "carrier name=$carrier_name"
	echo "carrier config=$config"
	echo -e "--------------------------------"
}

# switching between US carrier frequency bands
_module_1199_68c0_switch_carrier() {
	# chekc module information
	_module_1199_is_at_exist 2>/dev/null
	[ x"$?" != x"0" ] && _exit

	if [ x"$MODULE_NAME" != x"MC7354" ]; then
		>&2 echo "Error: Operation not support."
		_exit 3
	fi

	local ISP=$1	
	local module_info=""
	local choice="1"	
	local cmd="AT!GOBIIMPREF="


	cell_at_cmd 'ATE0' > /dev/null

	# enable password protected command
	cell_at_cmd 'AT!entercnd="A710"' > /dev/null
	#wait

	echo "----------switch_carrier------------"	

	# use AT+CGMR to get firmware infomation
	module_info=$(cell_at_cmd 'AT+CGMR' | grep "_" )
	module_info=${module_info/*_/}
	module_info=${module_info/ */}
	fw="$module_info"

	[ x"$1" = x"ATT" ] && carrier="ATT"
	[ x"$1" = x"Verizon" ] && carrier="VZW"
	[ x"$1" = x"Sprint" ] && carrier="SPRINT"
	[ x"$1" = x"Generic" ] && carrier="GENNA-UMTS"

	# use AT!priid? to get carrier information 
	module_info=$(cell_at_cmd 'AT!priid?' 2 | grep "$carrier")
	config=$(echo $module_info | awk 'BEGIN {FS="_"}; {print $7}' )
	config=${config}_$(echo $module_info | awk 'BEGIN {FS="_"}; {print $8}' )

	case "$1" in
		Verizon)	
			cmd="${cmd}\"${fw}\",\"VZW\",\"VZW_${config}\""
			;;
		ATT)
			cmd="${cmd}\"${fw}\",\"ATT\",\"ATT_${config}\""
			;;
		Sprint)
			cmd="${cmd}\"${fw}\",\"SPRINT\",\"SPRINT_${config}\""
			;;
		Generic)
			cmd="${cmd}\"${fw}\",\"GENNA-UMTS\",\"GENNA-UMTS_${config}\""
			;;
		*)	
			echo -e "Usage: "
			echo -e "       switch_carrier <$CARRIER>"
			_exit 4
			;;
	esac

	# switching function is MC7354 only
	echo "cmd=$cmd"
	cell_at_cmd 'ATE0'
	cell_at_cmd 'AT!entercnd="A710"'
	cell_at_cmd "$cmd"

	echo "wait for power cycle..."
	cell_power_cycle
}



# chekc current carrier
_module_1199_9071_check_carrier() {
	# chekc module status 
	_module_1199_is_at_exist 2>/dev/null
	[ x"$?" != x"0" ] && _exit

	if [ x"$MODULE_NAME" != x"MC7455" ]; then
		>&2 echo "Error: Operation not support."
		_exit 3
	fi

	local module_info=""
	local time="4"


	cell_at_cmd 'ATE0' > /dev/null
	cell_at_cmd 'AT!entercnd="A710"' > /dev/null
	module_info=$(cell_at_cmd 'AT!IMPREF?')

	#preffered
	local pre_fw=$(echo "$module_info" |grep "pre" | grep "fw" | \
		awk -F: '{print $2}') && pre_fw=${pre_fw// /}
	local pre_carrier_name=$(echo "$module_info"|grep "pre" | \
		grep "carrier" | awk -F: '{print $2}') && \
		pre_carrier_name=${pre_carrier_name// /}	
	local pre_config=$(echo "$module_info"|grep "pre" | grep "config" | \
		awk -F: '{print $2}' ) && \
		pre_config=${pre_config// /}

	#current
	local fw=$(echo "$module_info" |grep "current" | grep "fw" | \
		awk -F: '{print $2}') && fw=${fw// /}
	local carrier_name=$(echo "$module_info"|grep "current" | \
		grep "carrier" | awk -F: '{print $2}') && \
		carrier_name=${carrier_name// /}	
	local config=$(echo "$module_info"|grep "current" | grep "config" | \
		awk -F: '{print $2}' ) && \
		config=${config// /}

	echo "----------Carrier Info----------"
	echo "preffered firmware=$pre_fw"
	echo "preffered carrier name=$pre_carrier_name"
	echo "preffered carrier config=$pre_config"

	echo "firmware=$fw"
	echo "carrier name=$carrier_name"
	echo "carrier config=$config"
	echo -e "--------------------------------"
}

# switching between US carrier frequency bands
_module_1199_9071_switch_carrier() {
	# chekc module information
	_module_1199_is_at_exist 2>/dev/null
	[ x"$?" != x"0" ] && _exit

	if [ x"$MODULE_NAME" != x"MC7455" ]; then
		>&2 echo "Error: Operation not support."
		_exit 3
	fi

	local cmd="AT!IMPREF="

	echo "----------switch_carrier------------"	

	case "$1" in
		Verizon)	
			carrier="Verizon"
			;;
		ATT)
			carrier="ATT"
			;;
		Sprint)
			carrier="SPRINT"
			;;
		Generic)
			carrier="Generic"
			;;
		Auto)
			carrier="AUTO-SIM"
			;;
		*)	
			echo -e "Usage: "
			echo -e "       switch_carrier <$CARRIER>"
			_exit 4
			;;
	esac

	cmd="${cmd}\"${carrier}\""

	# enable password protected command to switch carrier
	cell_at_cmd 'ATE0' && \
		cell_at_cmd 'AT!entercnd="A710"' 1 && \
		cell_at_cmd "$cmd" 1
	if [ $? -ne 0 ]; then
		>&2 echo "Error: Switch carrier \"${carrier}\" failed, " \
			"please try again."
		_exit 1
	fi
	sleep 3

	echo "wait for power cycle..."
	cell_power_cycle
	sleep 30
	cell_power_on
}

_module_1199_pin_retries() {
	pin_times=$(cell_at_cmd 'AT+CPINR="SIM PIN"' | \
		grep '+CPINR: SIM PIN' | cut -d ',' -f 2)
	if [ x"${pin_times}" == x"" ]; then
		echo -1
	else
		echo ${pin_times}
	fi
}

_module_1199_operator() {
	local operator=$(_qmicli_value \
		"$(_qmicli --nas-get-home-network)" "Description")

	[ -z "${operator}" ] && echo "Unknown" || echo "${operator}"
}

_module_1199_68c0_operator() {
	_module_1199_operator
}

_module_1199_9071_operator() {
	_module_1199_operator
}
