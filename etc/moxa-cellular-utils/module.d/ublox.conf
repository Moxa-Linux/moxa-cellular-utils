#!/bin/bash
#
#       Copyright (C) MOXA Inc. All rights reserved.
#       Copyright (C) 2017-2018  Aeluin Chen <aeluin.chen@moxa.com>
#
#       This software is distributed under the terms of the
#       MOXA License.  See the file COPYING-MOXA for details.
#

# u-blox
# Vendor ID: 0451
# Datasheet URL: https://www.u-blox.com/sites/default/files/u-blox-CEL_ATCommands_%28UBX-13002752%29.pdf

_module_0451_2046() {
        local module_path=${1}
        local id=${2}
        local module_name="${3}"
        local dev_id=${module_path//\/*\//}

	ALL_MODULE_NAME[${id}]="u-blox LARA-R280"
        # ALL_INTERFACE[${id}]=$(ls \
        #         $module_path/$dev_id:*.0/$SYS_NET/ 2>/dev/null)
        ALL_GPS_PORT[${id}]=$(ls \
		$module_path/$dev_id.2/$dev_id.2*.0/tty/ 2>/dev/null | grep tty)
        ALL_AT_PORT[${id}]=$(ls \
                $module_path/$dev_id.3/$dev_id.3*.0/tty/ 2>/dev/null | grep tty)
        ALL_MODEM_PORT[${id}]=$(ls \
                $module_path/$dev_id.3/$dev_id.3*.2/tty/ 2>/dev/null | grep tty)
}

_module_0451_2046_attach_status() {
	local info=""
	local status="0"
	local cs="n/a"
	local ps="detached"

	# +CGATT: 1
	info=$(cell_at_cmd "AT+CGATT?")
	status=$(echo "${info}" | grep "^+CGATT:" | awk '{print $2}')
	if [ "${status}" == "1" ]
	then
		ps="attached"
	fi
	echo "CS: ${cs}"
	echo "PS: ${ps}"
}

_module_0451_2046_unlock_pin() {
	local ret=""

	ret=$(cell_at_cmd "AT+CPIN=\"$1\"" 1)
	if [ $? -ne 0 ]; then
		echo $ret
		_exit 1
	fi
}

_module_0451_2046_pin_retries() {
	# +UPINCNT: 3,0,10,10
	pin_times=$(cell_at_cmd "AT+UPINCNT" | grep "^+UPINCNT" | awk '{print $2}' | cut -d ',' -f 1)
	if [ x"${pin_times}" == x"" ]; then
                echo -1
        else
                echo ${pin_times}
        fi
}

_module_0451_2046_service() {
	# +CREG: <n>,<stat>[,<lac>,<ci>[,<Act>]]
	# <lac>,<ci>,<Act> are reported only if
	#   <n>=2 and the mobile is registered on some network cell.

	# <stat> - registration status
	#   0 - not registered, the MT is not currently searching a new
	#       operator to register to
	#   1 - registered, home network
	#   2 - not registered, but the MT is currently searching a new
	#       operator to register to
	#   3 - registration denied
	#   4 - unknown
	#   5 - registered, roaming
	#   6 - registered for "SMS only", home network 
	#   7 - registered for "SMS only", roaming
	#   9 - registered for "CSFB not preferred", home network 
	#  10 - registered for "CSFB not preferred", roaming
	# <lac> - location area code (2G, 3G) or tracking area code (4G)
	#         in hexadecimal format (e.g. "00C3" equals 195 in decimal)
	# <ci> - cell ID in hexadecimal format.
	# <AcT>: integer type; access technology of the serving cell
	#   0 - GSM
	#   1 - GSM COMPAT
	#   2 - UTRAN
	#   3 - GSM w/EDGE
	#   4 - UTRAN w/HSDPA
	#   5 - UTRAN w/HSUPA
	#   6 - UTRAN w/HSDPA and HSUPA
	#   7 - E-UTRAN
	# +CREG: 2,1,"2817","0107DDBB",2
	local info=""
	local _service=""
	local service=""
	local lac=""
	local cellid=""

	info="$(cell_at_cmd "AT+CREG?" | grep "^+CREG:" | awk '{print $2}')"
	if [ -z "${info}" ]; then
		return 1
	fi

	if [ "$(echo "${info}" | cut -d ',' -f 1)" != "2" ]; then
		cell_at_cmd "AT+CREG=2" 0.5> /dev/null 2>&1
		[ $? -ne 0 ] && return 1
	fi

	cellid=$(echo "${info}" | cut -d ',' -f 4 | sed -e 's/"//g')
	lac=$(echo "${info}" | cut -d ',' -f 3 | sed -e 's/"//g')
	_service=$(echo "${info}" | cut -d ',' -f 5)
	if [ "${_service}" == "0" ] || [ "${_service}" == "1" ] || [ "${_service}" == "3" ]; then
		service="GSM"
	elif [ "${_service}" == "2" ]; then
		service="UMTS"
	elif [ "${_service}" == "4" ]; then
		service="HSDPA"
	elif [ "${_service}" == "5" ]; then
		service="HSUPA"
	elif [ "${_service}" == "6" ]; then
		service="HSPA"
	elif [ "${_service}" == "7" ]; then
		service="LTE"
	else
		echo "Unknown service: ${_service}"
		return 1
	fi

	echo "Service: ${service}"
	echo "LAC: ${lac}"
	echo "CellID: ${cellid}"
}

_module_0451_2046_gps_on() {
	cell_at_cmd 'AT+UGPS=1,0,1' || return $?
}

_module_0451_2046_gps_off() {
	cell_at_cmd 'AT+UGPS=0' || return $?
}

_module_0451_2046_iccid() {
	local iccid=$(cell_at_cmd 'AT+CCID' | grep "+CCID:" | \
		awk '{print $2}' )
	echo ICC-ID: $iccid
}

_module_0451_2046_module_ids() {
	local info="$(cell_at_cmd 'AT+CGSN')" || return $?
	local imei=$(echo "${info}" | awk '{ if(NR==2) print $0}')

	echo IMEI: $imei
}
